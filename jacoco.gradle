apply plugin: 'jacoco'

ext {
    coverageSourceDirs = 'src/test/java'
}

jacoco {
    toolVersion = "$jacocoVersion"
    reportsDir = file("$project.buildDir/reports/jacoco") // file for reports (xml, html)
}

task jacocoTestReport(type: JacocoReport) {
    dependsOn "testDebugUnitTest"
    group "Reporting"
    description "Generate Jacoco coverage reports for Debug build"

    reports {
        csv.enabled = true
        html.enabled = true
    }

    def excludes = [
            // data binding
            'android/databinding/**/*.class', '**/android/databinding/*Binding.class', '**/android/databinding/*',
            '**/androidx/databinding/*', '**/BR.*',
            // android
            '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*',
            // kotlin
            '**/*MapperImpl*.*', '**/*$ViewInjector*.*', '**/*$ViewBinder*.*', '**/BuildConfig.*', '**/*Component*.*',
            '**/*BR*.*', '**/Manifest*.*', '**/*$Lambda$*.*', '**/*Companion*.*', '**/*Module*.*', '**/*Dagger*.*',
            '**/*Hilt*.*', '**/*MembersInjector*.*', '**/*_MembersInjector.class', '**/*_Factory*.*',
            '**/*_Provide*Factory*.*', '**/*Extensions*.*',
            // sealed and data classes
            '**/*$Result.*', '**/*$Result$*.*',
            // adapters generated by moshi
            '**/*JsonAdapter.*',
    ]

    def debugTree = fileTree(
            dir: "${project.buildDir}/intermediates/javac/debug/classes",
            excludes: excludes
    )
    def kotlinDebugTree = fileTree(
            dir: "${project.buildDir}/tmp/kotlin-classes/debug",
            excludes: excludes
    )
    def mainSrc = "${project.projectDir}/src/main/java"

    classDirectories.from = files([debugTree], [kotlinDebugTree])
    sourceDirectories.from = files([mainSrc])
    executionData.from = files("${project.buildDir}/jacoco/testDebugUnitTest.exec")
}